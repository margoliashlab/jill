#-*- mode: org -*-
#+STARTUP:    align fold hidestars oddeven
#+TITLE:    JILL Real-Time Auditory Neuroscience Framework: Specification
#+AUTHOR:    Dan Meliza
#+EMAIL:     dan||meliza.org
#+DATE: [2013-02-08 Fri]
#+TEXT: Version 2.1
#+LANGUAGE:   en
#+OPTIONS: ^:nil H:2
#+HTML_HEAD:    <link rel="stylesheet" href="org.css" type="text/css" />

*JILL* consists of a set of modules (programs) that use the JACK realtime audio
framework to run auditory behavioral and neuroscience experiments.

- Editor: Dan Meliza <dan at meliza.org>
- State:  released

* Licence                                                               :rel2_0:

Copyright (c) 2010-2013 C Daniel Meliza.

This Specification is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option) any
later version.

This Specification is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
details.

You should have received a copy of the GNU General Public License along with
this program; if not, see <http://www.gnu.org/licenses>.

* Language

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
"SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be
interpreted as described in [[http://tools.ietf.org/html/rfc2119][RFC 2119]].

* Goals

This specification defines the operations that modules in a JACK-based data
recording and stimulus presentation system (*JILL*) must support, and how these modules
will interact with each other. It also describes a set of core modules using
this framework.

JILL modules (also referred to as clients) read and write data to the JACK
system through ports, and can serve as sources, sinks, or filters. In addition,
JILL modules may communicate through [[http://www.zeromq.org][zeromq]] (ØMQ) sockets to exchange
non-realtime status and control messages, allowing multiple modules to coordinate
in a robust, scalable manner.

* General JILL module specification

JILL modules are independent processes that communicate through JACK and ØMQ.
JACK is used for real-time processing of sampled and event data, and ØMQ is used
for exchanging control and status messages. The specification for JILL modules
must have the following sections:

** JACK Ports

Ports are the mechanism JACK uses to move data between clients.  Essentially
these consist of a region of shared memory that is managed by the JACK daemon.
Clients operate on these buffers in their realtime processing loops.

There are two kinds of ports defined in JACK (at present). Audio ports contain
floating point samples.  MIDI ports contain a series of MIDI messages with
sample indices that give their temporal position within the realtime audio
stream (see [[MIDI messages]]).

JILL modules must register with the JACK server as a client. Module
specifications must indicate how many ports a module will register, their
function, their type (sampled or event) and their direction (input or output);
and whether the client will register, unregister, connect, or disconnect any
ports during normal operation.

** JACK Events

The JACK framework is callback based, and clients must handle a range of
different events. Thus, the specification for each module must describes how it
will handle each of the following events, though modules may choose to ignore
some event types.

1. the process callback, which reads and writes data to ports
2. registration or removal of ports in the JACK system. Note that these events
   occur whenever a port is created or destroyed anywhere in the JACK system,
   not necessarily in the client itself.
3. connection or disconnection of ports. Again, these connections can be
   anywhere in the JACK system, but for the purposes of this document, only
   connections to and from the client will be considered.
4. overrun and underrun events (xruns). Caused when a client fails to exit its process
   loop in time.
5. changes to period size. The period size is how many samples are passed to the
   clients in the process loop. Changes to period size cause gaps in the
   processing stream.
6. server shutdown. Modules should clean up any open files, etc, when this
   occurs. Note that at this point the client has been disconnected from the
   JACK daemon.
7. timebase changes. These events occur when a client requests a new position in
   the processing stream. As of this writing, clients should ignore these events
   and must not request timebase changes.

** ØMQ Sockets

Modules may use ØMQ interprocess endpoints to provide an interface for control
and for receiving log messages. To ensure that other programs can access these
endpoints unambiguously, modules must choose conforming names based on the
client name and the socket type. See the ØMQ documentation for socket types.

Note that the names of the sockets are not consistent with Windows filenames. At
present writing, ØMQ does not support interprocess communication under Windows.
If this changes, an alternative endpoint name will be added to this
specification.

*** Logging                                                          :rel2_1:

One module in the JACK client graph may serve as a centralized logger. This
module (i.e., the log server) must bind a DEALER socket to the endpoint
=ipc:///tmp/org.meliza.jill/SERVER_NAME/msg=. Programs may send log
messages to this logger by connecting a ROUTER socket to this endpoint.

Log messages are sent asynchronously and are not acknowledged by the log
server. Messages must consist of the following ØMQ frames:

1. The source of the message, as a UTF-8 encoded string.
2. The UTC timestamp of the message, as an ISO 8601 string (e.g.,
   20130827T095937.228602).
3. The log message, as a UTF-8 encoded string.

Note that with ØMQ, sockets may connect to an endpoint before the server binds.
Messages sent to the endpoint will be queued and sent when the server binds.

*** Control                                                          :rel2_2:

Modules may bind a control socket with type REQ to endpoint
=ipc:///tmp/org.meliza.jill/SERVER_NAME/CLIENT_NAME=. The control protocol is
not defined at this time.

** UNIX Signals

In addition, the specification must state how clients will handle standard POSIX
termination signals SIGINT, SIGTERM, and SIGHUP to avoid data loss.  In
general, modules are not responsible for making downstream clients aware of any
events that can be inferred from the appropriate JACK callback.  However, it is
considered good practice to follow any note_on or stim_on events with the
appropriate offset event when shutting down.

** Options and behavior

This section describes commandline options and other details of behavior (e.g.,
whether it accepts input during operation).

* Core JILL modules

** jdetect

The function of jdetect is to detect the onsets and offsets of sustained
auditory signals, such as when a bird vocalizes. It takes a single audio stream
as input and outputs events indicating when the signal crossed the start and
stop thresholds.

*** JACK Ports                                                       :rel2_0:

+ in :: sampled data, input. The signal is processed to determined when it
        crosses onset or offset thresholds
+ trig_out :: event data, output. Emits note on and note off events indicating
              the times when the signal crossed the onset or offset threshold,
              respectively. The channel for the event can be set by the user.
              Output is hardware-compatible.
+ count :: (optional) sampled data, outout. Provides debug information about the
           state of the signal detector. The meaning of the signal depends on
           the implementation of the detector.

The client shall not make any changes to its ports during operation.

*** JACK Events                                                      :rel2_0:

1. The process callback reads data from the input stream and uses it to
   calculate a running estimate of the signal power. When the signal meets the
   onset or offset condition(s), jdetect will output a note on or note off
   event. The implementation of this algorithm is not specified and may be
   changed to improve performance. The detector will likely need to maintain
   state across periods.
2. Port registration and unregistrations are ignored.
3. Port connections and disconnections are ignored.
4. Although xruns indicate missing data, the detector must continue to function
   as though they had not occurred. Even if the last event was a note on, a weak
   signal will eventually cause the offset threshold to be crossed, and the
   resulting note off signal will be in sync with the auditory data at that
   point.
5. Changes to buffer size are ignored, unless they necessitate a change to the
   parameters of the detector.
6. Server shutdowns cause the client to terminate.

*** ØMQ Sockets                                                      :rel2_1:

*jdetect* connects to the logging endpoint and logs its parameters on startup
and all detection events during normal operation.

*jdetect* does not bind to a control socket at present. Eventually this mechanism
will be used to adjust parameters in a running process.

*** UNIX Signals                                                     :rel2_0:

Termination signals have their default behavior (cause the client to exit). If
the last ouput was a note_on event, a note_off event will be sent.

*** Options and behavior                                             :rel2_0:

The jdetect module accepts commandline options that specify the behavior of the
signal detector. These will depend on the implementation. Onset and offset
events and their times will be logged. The client may accept input during
operation to adjust these parameters, and it may provide information on the
terminal as to the current state of the detector.

** jflip

The function of *jflip* is to whiten the input data by randomly inverting it around
zero. The signal's envelope is largely unchanged, but frequency information is
discarded.

Input signals which are not centered around zero are not transformed correctly.

*** JACK Ports                                                       :rel2_0:

+ in :: sampled data, input. The signal is processed to generate white noise.
+ out :: processed data, output. The overall waveform is kept almost the same, but 
frequency info are disrupted.

The client will not make any changes to its port configuration during operation.

** jrecord

The function of *jrecord* is to write sampled and event data to disk. Sampled data
may include audio and neural signals, and event data may include signal
detections (such as emitted by jdetect), spike times, and other external events.
Data are stored in HDF5 format (http://www.hdfgroup.org/HDF5) using the ARF
specification (https://github.com/dmeliza/arf). Recording may be continuous, or
may be in discrete epochs triggered by events. In the latter case, a prebuffer
provides the ability to record data prior to the actual epoch onset event.

*** JACK Ports                                                       :rel2_0:

+ in_NNN :: input. NNN is a numerical index. The number of ports and their type
            is determined at startup by specifying a list of ports to connect to
            the client.  The client may also create custom-named ported as
            specified by the user.
+ trig_in :: input, events. In epoch mode, controls the start and stop of
             recording epochs. Note on and stim on (onset) events cause epochs
             to start; note off and stim off (offset) events cause epochs to
             terminate. Multiple inputs may be connected to this port, in which
             case the events will be mixed. Onset events are ignored during
             recording epochs; offset events are ignored outside of recording
             epochs. All events, including their channel information, are
             logged. In continuous recording mode, this port is not created.

The client will not make any changes to its port configuration during operation.

*** JACK Events                                                      :rel2_0:

1. The process callback places data into a ringbuffer.  Each period is stored as
   a chunk to ensure synchronization across channels. There is no output.
2. Registration/unregistration events are ignored.
3. Port connections and disconnections are logged to the output file. If the the
   program is in epoch mode, the last connection to the trigger port is
   disconnected, and recording is in progress, stops in the next period (TODO).
   Disconnected input ports will still be recorded, but will have zeros in the
   signal.
4. All xruns are logged to the output file. An attribute is set on the entry to
   indicate that there may be gaps in the data, but jrecord must continue to
   store data as it arrives.
5. Changes to period size result in a log entry and cause all the data in the
   ringbuffer to be flushed to disk. Because this introduces a gap in the data
   stream, the current entry will be terminated. In continuous mode, a new entry
   will be started; in epoch mode no new entry is started. Furthermore, if the
   new size of the period is so large that less than three full periods will fit
   in the ringbuffer, the ringbuffer is resized.
6. Server shutdown causes remaining data in the ringbuffer to be flushed before
   the client terminates.

*** ØMQ Sockets                                                      :rel2_1:

*jrecord* connects to the logging endpoint and logs all events (see [[*jrecord%20log][jrecord
log]]). It also attempts to bind to the logging endpoint. If successful, it will
write any received log messages to the =jill_log= dataset in the open ARF file.

*** UNIX Signals                                                     :rel2_0:

SIGTERM, SIGINT, and SIGHUP all cause the client to flush data and terminate. To
maintain a running *jrecord* client, run it in a virtual screen.

*** Options and behavior

**** commandline options                                             :rel2_0:

1. Epoch or continuous recording mode
2. Output file name.
3. Prebuffer size. Only takes effect in epoch mode. Specifies the amount of data
   (in units of time) write from before the time of the trigger to write to
   disk. This is treated as an approximate value, because the prebuffer may not
   fill completely, and for performance sake only complete periods may be used.
4. Postbuffer size. Only takes effect in epoch mode. Specifies the amount of
   additional data (in units of time) write after the trigger port signals an offset.
5. A list of ports to create and/or connect to. If the specified port name exists in the
   JACK system, it will be connected to a numerically named port on the client
   (e.g. pcm_000).  If the port doesn't exist, it's interpreted as a name for
   a port to create.  These ports aren't connected, so users can connect them up
   later.
6. Optional key-value pairs, which will be stored in attributes of created
   entries.
7. Ringbuffer size. An advanced option most users will not need to set.
   Determines the size of the buffer used to move data from the realtime process
   thread to the writer thread. By default this is automatically set to hold at
   least ten complete periods of data, or 2 seconds, whichever is more.

**** startup                                                         :rel2_0:

On startup, *jrecord* will attempt to open the output file and obtain a write
lock. If either operation fails, the program will terminate with an error. The
program should attempt to determine if the output file is on an NFS share and
proceed with a stern warning.  After opening the file it will create a log
table if needed (see [[jrecord log]]).

Next, *jrecord* will create the JACK client, register ports, activate the client,
and connect the inputs.

**** continuous mode operation                                       :rel2_0:

In continuous mode, *jrecord* will create an entry and begin writing to the
disk immediately, and continue until the program is terminated.  Entries may be
split as necessary to ensure consistency (for example, if the sample count
overflows), but there must be no gaps in the data in normal operation.

**** epoch mode operation                                            :rel2_0:

In epoch mode, *jrecord* will be in one of two states. It starts in the =paused=
state, and will wait until it receives a note on event on the trigger port.
While waiting, it will copy periods from the ringbuffer to the prebuffer,
freeing periods beyond the duration of the prebuffer window. While in this
state, note off events are ignored.

On receiving a note on event, *jrecord* will open a new entry, write the
prebuffered data to the entry, and then enter the =recording= state. In this
state it will write all incoming data to the entry. Note on events will be
recorded but otherwise ignored. On receiving a note off event it will close the
dataset and entry and enter the =paused= state again.

**** data storage                                                    :rel2_0:

Each input channel will be stored in a separate dataset under the entry. Sampled
data will be stored in HDF5 array datasets, with elements corresponding to
individual frames and a datatype that matches the internal JACK sample type
(typically single-precision floats).

Event data will be stored in arrays with a compound datatype. Empty events (i.e.
without a status byte) are discarded. The time and status byte are stored in
fixed-length fields, and the rest of the message is stored in a variable length
field.

: start       - the time of the event (sample count)
: status      - the MIDI status byte (char)
: message     - the MIDI message (vlen string)

At present, h5py cannot read vlen types that are not strings, so *jrecord* will
store messages as strings. Standard MIDI messages (see [[MIDI messages]]) must be
stored in hex encoding; extended message types with a string payload are stored
in standard UTF-8 encoding.

**** jrecord log                                                     :rel2_0:

*jrecord* maintains a log of its operations, messages from connected clients,
and any exceptions that occur during operation.  The function of this log is to
permit later reconstruction of an experiment, and the emphasis is on
human-readability. Much of the information is also available as metadata, which
should be considered authoritative.

The log is an extensible dataset with the name =jill_log= stored under the root
group of the ARF file. The fields in the log are:

: sec      - the time of the event, in seconds since the epoch
: usec     - the number of microseconds to add to sec to yield a more precise time of event
: message  - the event message, vlen string with the format "source: event description"
:            where source is the client or process giving rise to the message

*jrecord* will record the following messages:

1. opening and closing a file in write mode
2. parameters of the jack server (and changes to them)
3. opening and closing an entry for writing
4. creating a new dataset in an entry
5. xruns and other exceptions
6. channel connection and disconnection
7. initial operating parameters of other clients
8. status events from other clients

** jstim

The jstim module's function is to present auditory stimuli through the JACK
interface. Stimuli can be presented singly or as part of a batch. The stimuli in
a batch can be repeated and the order can be randomized. Presentation can occur
at fixed intervals, with fixed gaps between stimuli, or in response to an
external trigger. An event output line can be used to trigger other modules,
like *jrecord*. Can also be used for presentation of stimuli while searching for
neurons.

*** JACK Ports                                                       :rel2_0:

+ out :: sampled, output. Carries the audio signal for the stimulus.
+ trig_out :: event, output. Generates stim on events when the stimulus starts
              and stim off events when it ends. For recording, the channel value
              is 0. For search, the channel value is 8. The data is the basename
              of the stimulus file, UTF-8 encoded, and null-terminated. *This
              message is not hardware-compatible* and is intended for
              consumption by *jrecord*.
+ trig_in :: (optional) event, input. Only created for triggered mode. Initiates
             stimulus playback synchronized to the time of any note_on or
             stim_on events. Ignores note_off events.

*** JACK Events                                                      :rel2_0:

1. The process callback copies data from a fixed buffer into the output port
   buffer. Between stimuli, writes zeros to the output. The use of fixed buffers
   assumes that stimuli are relatively short and memory is plentiful, but allows
   stimulus onset to be synchonized precisely with note on events. On stimulus
   onset, writes a stim_on event to the event output. On stimulus offset, writes
   a stim_off event to the event output.
2. Registration/unregistration events are ignored
3. Port connections and disconnections are ignored
4. Xruns cause the process thread to terminate any active playback. The
   stim_off event generated when this happens should reflect the time when the
   signal truncated. Other clients will be notified of the xrun through the JACK
   event mechanism.
5. Changes to period size also terminate active playbacks.
6. Server shutdown causes termination of the client.

*** ØMQ Sockets                                                      :rel2_1:

*jstim* connects to the logging endpoint and logs its initial parameters and all
stimulus onset and offset events.

*jstim* does not bind to a control socket at present. Eventually this mechanism
may be used to allow other programs to initiate or terminate playback.

*** UNIX Signals                                                     :rel2_0:

SIGINT, SIGTERM, and SIGHUP events cause termination of the client.  The client
should try to send a stim_off event. The client must ensure that the buffer
associated with the trig_out port is properly cleared before terminating.

*** Options and behavior

**** commandline options                                             :rel2_0:

1. When to start stimuli: external trigger, or minimum interval/gap. Keypress?
2. Default number of repetitions
3. Loop endlessly or once
4. Whether to randomize stimulus order
5. List of stimulus files (and optional numerical values indicating number of reps)

**** startup                                                         :rel2_0:

1. parse list of stimulus files and generate a (randomized) list.
2. initialize client, register ports and callbacks, start client, connect ports.
3. while the process thread is running, load and resample input files as needed.
   when the process thread indicates it has played all the stimuli, shut down
   the client and terminate program.

** jplot                                                             :rel2_2:

Replaces splot, providing scrolling oscillogram and periplots for rasters.  It
may be possible to upgrade splot to a more recent version of gtk and replace its
signal acquisition routines with JACK callbacks.

** jspikes                                                           :rel2_2:

Replaces aspikes for online spike detection.

* Appendices

*** MIDI messages

In JACK, MIDI messages consist of a status byte followed by zero or more data
bytes. Status bytes use the highest bit (0x80-0xFF) and data bytes do not
(0x00-0x7F). JILL modules *must* send conforming MIDI messages if the high bit
of the status byte is set. JILL modules *may* send messages in which the status
byte has the high bit clear, but these must not be sent to standard MIDI
devices. The specification for any module outputting MIDI must indicate whether
its messages are hardware-compatible.  The following message types are defined
by the MIDI standard:

| status | explanation       | data size | data contents           |
|--------+-------------------+-----------+-------------------------|
|   0x8x | note on           |         2 | pitch, velocity         |
|   0x9x | note off          |         2 | pitch, velocity         |
|   0xAx | key pressure      |         2 | key, pressure           |
|   0xBx | controller change |         2 | controller, value       |
|   0xCx | program change    |         1 | preset                  |
|   0xDx | channel pressure  |         1 | pressure                |
|   0xEx | pitch bend        |         2 | bend (short LE int)     |
|   0xF0 | system exclusive  |         n | vendor id, message      |
|   0xF2 | song position     |         2 | position (short LE int) |
|   0xF3 | song select       |         1 | song number             |
|   0xF6 | tune request      |         0 |                         |
|   0xF7 | end of sysex      |         0 |                         |
|   0xF8 | timing tick       |         0 |                         |
|   0xFA | start song        |         0 |                         |
|   0xFB | continue song     |         0 |                         |
|   0xFC | stop song         |         0 |                         |
|   0xFE | active sensing    |         0 |                         |
|   0xFF | system reset      |         0 |                         |

For status bytes 0x80 to 0xEF, the lowest four bits indicate the channel. JILL
modules should use channel 0 unless there is a good reason to do otherwise. If
pitch and velocity are not meaningful, default values of 60 and 64 should be
used.

The following hardware-incompatible message types are defined for JILL modules:

| status | explanation | data size | data contents                                |
|--------+-------------+-----------+----------------------------------------------|
|   0x0x | stim on     | n         | stimulus name (null-terminated UTF-8 string) |
|   0x1x | stim off    | n         | stimulus name (string)                       |
|   0x2x | info        | n         | an informative message (string)              |

A brief summary of the MIDI specification is available at
http://www.srm.com/qtma/davidsmidispec.html.
